type propertyVariant = record { text; GenericValue };

type StringResponseDto = variant { "Ok": opt text; "Err": opt text };

type NatResponseDto = variant { "Ok": opt nat; "Err": opt text };

type FloatResponseDto = variant { "Ok": opt float32; "Err": opt text };

type GenericValue = variant { "Nat64Content": nat64; "Nat32Content": nat32; "BoolContent": bool; "Nat8Content": nat8; "Int64Content": int64; "IntContent": int; "NatContent": nat; "Nat16Content": nat16; "Int32Content": int32; "Int8Content": int8; "FloatContent": float64; "Int16Content": int16; "BlobContent": vec nat8; "Principal": principal; "TextContent": text };

service: () -> {
    "startCaptcha": () -> (StringResponseDto) query;
    "maxTokens": () -> (NatResponseDto) query;
    "price": () -> (FloatResponseDto) query;
    "isInit": () -> (bool) query;
    "mint": () -> (NatResponseDto);
    "setCustodians": (vec principal) -> ();
    "setNftCanister": (principal) -> ();
    "getNftCanister": () -> (principal);
    "initiateMint": () -> ();
}
